<?php
/**
 * Options File
 *
 * Holds all info for Options Class.
 */

/**
 * Options Class
 *
 * Create, edit, add, remove, update your theme options.
 */
class Options
{
    /**
     * Creates a user table if none is set in DB.
     *
     * @see MySQL::checkTable() MySQL::checkTable()
     */
    function __construct()
    {
        global $MySQL;
        $table = (object) [
            'name' => 'options', 
            'cols' => array( 
                (object) [
                    'name' => 'id',
                    'type' => 'BIGINT',
                    'type_num' => '20',
                    'extra' => 'AUTO_INCREMENT PRIMARY KEY'
                ],
                (object) [
                    'name' => 'option_name',
                    'type' => 'VARCHAR',
                    'type_num' => '64',
                    'extra' => false
                ],
                (object) [
                    'name' => 'option_value',
                    'type' => 'LONGTEXT',
                    'type_num' => false,
                    'extra' => false
                ]
            )
        ];
        $MySQL->checkTable($table);
    }

    /**
     * Alias for add()
     *
     * @see Options::add() add()
     *
     * @param string $option The option name.
     * @param mixed[string|array] $value The value(s) of options.
     *
     * @return array The value of the options or false.
     */
    public function set($option, $value = null)
    {
        $this->add($option, $value);
    }

    /**
     * Adds Option
     *
     * @see Options::getRaw() getRaw()
     * @see MySQL::insert() MySQL::insert()
     * @see Options::get() get()
     *
     * @param string $option The option name.
     * @param mixed[string|array] $value The value(s) of options.
     *
     * @return array The value of the option or false.
     */
    public function add($option, $value = null)
    {
        global $MySQL;
        if($this->getRaw($option) === false) {
            //	Add it, get it, return it.
            $MySQL->insert("options", array("option_name" => $option, "option_value" => serialize($value)));
            return $this->get($option);
        }
    }

    /**
     * Gets Option
     *
     * @see Options::getRaw() getRaw()
     *
     * @param string $option The option name.
     * @param string $value The value(s) of options.
     *
     * @return array The value of the option.
     */
    public function get($option, $default_value = false)
    {
        if($r = $this->getRaw($option, $default_value) ) {
            if($r != $default_value) {
                return unserialize($r['option_value']);
            } else {
                return $default_value;
            }
        }
    }

    /**
     * Gets raw options.
     *
     * @see MySQL::select() MySQL::select()
     *
     * @param string $option The option name.
     * @param string $value The value(s) of options.
     *
     * @return array The value of the option.
     */
    protected function getRaw($option, $default_value = false)
    {
        global $MySQL;
        $r = $MySQL->select("options", array("option_name" => $option));
        if(!empty($r)) {
            return $r;
        } else {
            return $default_value;
        }
    }

    /**
     * Deletes Option
     *
     * @see MySQL::delete() MySQL::delete()
     * @see Options::get_raw() get_raw()
     *
     * @param string $option The option name.
     *
     * @return boolean True if success.
     */
    public function delete($option)
    {
        global $MySQL;
        $o = $this->getRaw($option);
        if(!empty($o))
            return $MySQL->delete("options", array("option_id" => $o['option_id']));
    }
}

