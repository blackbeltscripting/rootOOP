<?php
/**
 * Testing this
 *
 * This other test for rootOOP
 */
namespace rootOOP\Core;

/**
 * User Control
 *
 * This other test for rootOOP
 */
class User {
	/*
		Got this code @:
		http://stackoverflow.com/questions/3290283/what-is-a-good-way-to-produce-a-random-site-salt-to-be-used-in-creating-passwo/3291689#3291689
		
		Using Higher Entropy functionality to create PRNG characters.
		(Used specifically for forgot password auth token).
		I'm guessing this will have to be switched later to a higher entropy
			PRNG as this seems to be a weak area of programming itself.

	*/
	private function crypto_rand_secure($min, $max) {
		$range = $max - $min;
		if ($range < 0) return $min; // not so random...
		$log = log($range, 2);
		$bytes = (int) ($log / 8) + 1; // length in bytes
		$bits = (int) $log + 1; // length in bits
		$filter = (int) (1 << $bits) - 1; // set all lower bits to 1
		do {
		    $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
		    $rnd = $rnd & $filter; // discard irrelevant bits
		} while ($rnd >= $range);
		return $min + $rnd;
	}

	private function getToken($length=32) {
		$token = "";
		$codeAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		$codeAlphabet.= "abcdefghijklmnopqrstuvwxyz";
		$codeAlphabet.= "0123456789";
		for($i=0;$i<$length;$i++) {
			$token .= $codeAlphabet[$this->crypto_rand_secure(0,strlen($codeAlphabet))];
		}
		return $token;
	}



	function __construct() {
		global $MySQL;
		
		$table = (object) [
			'name' => 'users', 
			'cols' => array( 
				(object) [
					'name' => 'id',
					'type' => 'BIGINT',
					'type_num' => '20',
					'extra' => 'AUTO_INCREMENT PRIMARY KEY'
				],
				(object) [
					'name' => 'email',
					'type' => 'VARCHAR',
					'type_num' => '100',
					'extra' => false
				],
				(object) [
					'name' => 'password',
					'type' => 'VARCHAR',
					'type_num' => '64',
					'extra' => false
				],
				(object) [
					'name' => 'company',
					'type' => 'VARCHAR',
					'type_num' => '255',
					'extra' => false
				],
				(object) [
					'name' => 'first_name',
					'type' => 'VARCHAR',
					'type_num' => '50',
					'extra' => false
				],
				(object) [
					'name' => 'last_name',
					'type' => 'VARCHAR',
					'type_num' => '50',
					'extra' => false
				],
				(object) [
					'name' => 'contact_number',
					'type' => 'VARCHAR',
					'type_num' => '20',
					'extra' => false
				],
				(object) [
					'name' => 'registered_date',
					'type' => 'DATETIME',
					'type_num' => false,
					'extra' => false
				],
				(object) [
					'name' => 'pass_verify_token',
					'type' => 'VARCHAR',
					'type_num' => '205',
					'extra' => false
				],
			)
		];
		$MySQL->check_table($table);
	}
	function is_logged() {
			return (isset($_SESSION) && !empty($_SESSION));
	}
	function login() {
		/*
			What happens after authentification.
			This section is best used if you want different
			results for login. Ex: extend the class.
		*/
		$_SESSION = $this->db;
	}
	function get($email, $safe = false) {
		global $MySQL;
		
		if($this->db = $MySQL->select("users", array("email" => $email))) {
			if($safe == true) {
				return array("email" => $this->db['email'], "registered_date" => $this->db['registered_date']);
			} else {
				return $this->db;
			}
		} else {
			return false;
		}
	}
	function get_all() {
		global $MySQL;
		
		//	NOTE: MUST CREATE A IF AUTH LEVEL
		return $MySQL->query("SELECT * FROM " . TABLE_PREFIX . "users")->fetchAll(PDO::FETCH_ASSOC);
	}
	function authenticate($email, $pass) {	
		if($this->get($email)) {
			if(password_verify($pass, $this->db['password'])) {
				/***	 Authetification Complete.	***/
				$this->login();
				return true;
			}
		} else {
			return false;
		}
	}
	function signup($user, $login = true) {	
		global $MySQL;
		
		if(!$this->get($user['email'])) {
			//	Register now.
			$user['registered_date'] = date("Y-m-d H:i:s");
			if($login === true) {
				//	Hash password.
				$raw_pass = $user['password'];
				$user['password'] = password_hash($user['password'], PASSWORD_DEFAULT);
			}
			//	Empty token.
			$user['pass_verify_token'] = "";
			//	Insert into DB.
			$MySQL->insert("users", $user);			
			
			//	Log user in if it's signup/login
			if($login === true) {
				return $this->authenticate($user['email'], $raw_pass);
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	function forgot_password($email) {
		if($this->get($email)) {
			//	Forge key
			$key = $this->getToken(64);
			$forward = false;
			if(!empty($_SERVER['HTTP_X_FORWARDED_FOR']))
				$forward = $_SERVER['HTTP_X_FORWARDED_FOR'];
				
			//	This array is set EXACTLY to these parameters in DB
			$pass_verify_token = array(
				"key" => $key,
				"date" => time(),
				"REMOTE_ADDR" => $_SERVER['REMOTE_ADDR'],
				"HTTP_X_FORWARDED_FOR'" => $forward
			);

			global $MySQL;
			
			//	Inserts key to DB
			if($this->db = $MySQL->update("users", 
					array("pass_verify_token" => serialize($pass_verify_token) ),
					array("email" => $email)
				)
			) {
				//	Merge key onto email
				$email = sprintf(FORGOT_PASSWORD_EMAIL, $key);

				//	Create time limit for forgot password token.
				
				//	Send Email & return true.
				$subject = 'Forgot Password Request';
				$headers = 'From: no-reply@' . $_SERVER['HTTP_HOST'] . "\r\n" .
				    'X-Mailer: PHP/' . phpversion();
				mail($email, $subject, $email, $headers);
				return true;
				
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	function logout() {
		session_destroy();
		unset($_SESSION);
		return true;
	}
}

