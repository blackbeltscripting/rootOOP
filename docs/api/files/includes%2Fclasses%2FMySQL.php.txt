<?php
/**
 * MySQL Control
 *
 * All MySQL (Currenty using PDO only!)
 *
 * @subpackage rootOOP\MySQL
 * @filesource
 *
 */

namespace rootOOP\Core;

/**
 * MySQL Control
 *
 * All MySQL (PDO only!)
 *
 * @uses DB_HOST
 *
 */
class MySQL {
	/**
	 * Connect to database the moment this class is called.
	 *
	 * @param string $db_host The hostname of database. 
	 * @param string $db_user The database username.
	 * @param string $db_password The password needed to access database.
	 * @param string $db_name The name of the database to access.
	 * @param string $charset Database Character Set. 
	 *
	 */
	function __construct($db_host = DB_HOST, $db_user = DB_USER, $db_password = DB_PASSWORD, $db_name = DB_NAME, $charset = DB_CHARSET) {
		$this->connect($db_host, $db_user, $db_password, $db_name, $charset);
	}
	
	/**
	 * Checks to see if table is set.
	 *
	 * @param array $table The entire table structure
	 * @return boolean [True | False]
	 *
	 * @todo NEED TO CREATE A NOTE FOR CLIENT COULDN'T CREATE TABLE IN DB, CHECK WITH YOUR WEB ADMIN. FOR NOW RETURNS FALSE line[62]
	 *
	 */
	public function check_table($table) {
		$query = "SHOW TABLES LIKE '" . TABLE_PREFIX . $table->name . "'";
		
		//	Check DB
		$Result = $this->query($query);


		//	If no Result...
		if($Result->rowCount() === 0) {
			//	Attempt to create table
			$this->create_table($table);
			//	Create new Result
			$newResult = $this->query($query);
			
			//	If 2nd attempt works...
			if($newResult->rowCount() > 0){
				//	Everything's okay
				return true;
			} else {
				die;
				return false;
			}
		}
		//	Passed through.
		return true;

		
	}
	protected function create_table($table) {
		$cols = "";
		$n = count($table->cols);
		$i = 0;
		foreach($table->cols as $k => $col) {
			$type = "";
		
			if(
				strtolower($col->type) != "datetime" && 
				strtolower($col->type) != "longtext"
			) $type = "({$col->type_num})";
			$cols .= " " . $col->name . " " . $col->type . $type . " " . $col->extra;
			
			if(strtolower($col->type) == "varchar" && !empty(DB_COLLATE)) $cols .= " COLLATE " . DB_COLLATE;
			if(++$i !== $n) $cols .= ",";
		}
		$sql = "CREATE TABLE IF NOT EXISTS " . TABLE_PREFIX . $table->name . " ($cols);";
		
		$this->connection->exec($sql);
	}
	protected function connect($db_host, $db_user, $db_password, $db_name, $charset) {
		$this->connection = new PDO("mysql:host=$db_host;dbname=$db_name;charset=$charset", $db_user, $db_password);
		// debug mode
		//$this->connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		//$this->connection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
		return $this->connection;
	}
	private function format_where($values) {
		$where = array();
		foreach($values as $col => $val) {
			$where[] = $col . " = :" . $col;
		}
		$where = implode(" AND ", $where);
		return $where;
	}
		
	//	Raw query
	//	Deprecated.
	public function query($query) {
		return $this->connection->query($query);
	}
	public function insert($table, $values) {		
		/*	Using Preparing Statements, thus following the OWASP Standard
		 *	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
		 */
		$cols = implode(', ', array_keys($values));
		$vals = implode(', ', array_map(function($value) { return ":$value"; }, array_keys($values)));
		$query = "INSERT INTO " . TABLE_PREFIX . $table . " ($cols) VALUES ($vals)";

		return $this->bind_and_execute($query, $values);
	}
	public function select($table, $values) {
		$where = $this->format_where($values);
		$query = "SELECT * FROM " . TABLE_PREFIX . $table . " WHERE " . $where;

		return $this->bind_and_execute($query, $values);
	}
	
	public function update($table, $set_values, $where_values) {
		$set = $this->format_where($set_values);
		$where = $this->format_where($where_values);
		$values = array_merge($set_values, $where_values);
		$query = "UPDATE " . TABLE_PREFIX . $table . " SET " . $set . " WHERE " . $where;
		
		if($this->bind_and_execute($query, $values) === false)
			return true;
	}
	public function delete($table, $values) {
		$where = $this->format_where($values);
		$query = "DELETE FROM " . TABLE_PREFIX . $table . " WHERE ". $where . " LIMIT 1";

		if($this->bind_and_execute($query, $values) === false)
			return true;
	}
	protected function bind_and_execute($query, $values) {
		$stmt = $this->connection->prepare($query);
		/*	Binds Values using reference
		 *	Thanks to:
		 *	http://stackoverflow.com/questions/4174524/binding-params-for-pdo-statement-inside-a-loop
		 */
		foreach($values as $col => &$val) {
			$stmt->bindParam(":$col", $val);			
		}
		
		//	Execute and return
		if($stmt->execute()) {
			$arr = $stmt->fetch();
			if(!empty($arr)) {
				//	Removes numbered keys
				foreach ($arr as $key => $value) {
					if (is_int($key)) {
						unset($arr[$key]);
					}
				}
			}
			return $arr;
		}
	}
}

